{"version":3,"sources":["components/Footer.js","components/TodoList.js","components/TodoInput.js","App.js","serviceWorker.js","index.js"],"names":["Text","Typography","Footer","props","react_default","a","createElement","className","href","rel","target","icon","type","style","fontSize","TodoList","_ref","todos","deleteTodo","list","length","map","todo","index","Item","key","toString","actions","theme","onClick","TodoInput","saveTodo","_useState","useState","_useState2","Object","slicedToArray","input","setInput","onSubmit","event","message","error","preventDefault","es_input","maxLength","size","width","placeholder","value","onChange","suffix","es_button","marginRight","Title","Header","Layout","Content","App","JSON","parse","localStorage","getItem","setTodos","React","useEffect","setItem","stringify","layout","card","components_TodoInput","todoText","trimmedText","trim","concat","toConsumableArray","components_TodoList","todoIndex","newTodos","filter","_","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3073592.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\nimport {Typography, Icon} from 'antd';\nconst {Text} = Typography;\n\nfunction Footer(props) {\n  return (\n    <div className=\"footer\">\n      <a\n        href=\"https://github.com/jordanliu/todos\"\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n      >\n        <Text> View code on GitHub </Text>{' '}\n        <Icon type=\"github\" style={{fontSize: 14}} />\n      </a>\n    </div>\n  );\n}\n\nexport default Footer;","import React from 'react';\nimport {List, Icon} from 'antd';\nimport '../App.css';\n\nconst TodoList = ({todos, deleteTodo}) => {\n  return (\n    <div className=\"todo-wrapper\">\n      <List>\n        {todos.length > 0 &&\n          todos.map((todo, index) => (\n            <List.Item\n              key={index.toString()}\n              className=\"list-item\"\n              actions={[\n                <Icon\n                  type=\"check-circle\"\n                  theme=\"filled\"\n                  className=\"circle check\"\n                />,\n                <Icon\n                  type=\"close-circle\"\n                  theme=\"filled\"\n                  className=\"circle closed\"\n                  onClick={() => {\n                    deleteTodo(index);\n                  }}\n                />\n              ]}\n            >\n              {todo}\n            </List.Item>\n          ))}\n      </List>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React, {useState} from 'react';\nimport {Input, Button, Icon, message} from 'antd';\nimport '../App.css';\n\nconst TodoInput = ({saveTodo}) => {\n  const [input, setInput] = useState('');\n  const onChange = event => setInput(event.target.value);\n\n  const onSubmit = event => {\n    input.toString() === ''\n    && message.error('Enter a to-do item!')\n    event.preventDefault();\n    saveTodo(input);\n    setInput('')\n  };\n\n  return (\n    <div className=\"field-input\">\n      <form onSubmit={onSubmit}>\n      <Input\n        className=\"global-search\"\n        maxLength={36}\n        size=\"large\"\n        style={{width: '100%'}}\n        placeholder=\"Enter a to do list item\"\n        value={input}\n        onChange={onChange}\n        suffix={\n          <Button\n            className=\"search-btn\"\n            style={{marginRight: -12}}\n            size=\"large\"\n            type=\"primary\"\n            onClick={onSubmit}\n          >\n            <Icon type=\"plus\" />\n          </Button>\n        }\n      />\n      </form>\n    </div>\n  );\n}\n\nexport default TodoInput;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Footer from './components/Footer';\nimport TodoList from './components/TodoList';\nimport TodoInput from './components/TodoInput';\nimport {Layout, Typography, Card} from 'antd';\n\nconst {Title} = Typography;\nconst {Header, Content} = Layout;\n\n\nfunction App() {\n\nconst initalState = () => JSON.parse(localStorage.getItem('todoData')) || [];\nconst  [ todos, setTodos ] = useState(initalState);\n\n  React.useEffect(() => {\n    localStorage.setItem(\"todoData\", JSON.stringify(todos));\n  }, [todos]);\n\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Header>\n          <Title>todos</Title>\n        </Header>\n        <Content>\n\n          <Card>\n            <TodoInput saveTodo={(todoText) => {\n              const trimmedText = todoText.trim();\n\n              if(trimmedText.length > 0){\n                setTodos([...todos, trimmedText]);\n              }\n            }}/>\n          </Card>\n\n          <TodoList \n          todos={todos}\n          deleteTodo={(todoIndex) => {\n          const newTodos = todos.filter((_, index) => index !== todoIndex);\n\n          setTodos(newTodos);\n          }}/>\n\n        </Content>\n        <Footer />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App  />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}